var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QUBOConstraints","category":"page"},{"location":"#QUBOConstraints","page":"Home","title":"QUBOConstraints","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QUBOConstraints.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QUBOConstraints]","category":"page"},{"location":"#QUBOConstraints.AbstractOptimizer","page":"Home","title":"QUBOConstraints.AbstractOptimizer","text":"AbstractOptimizer\n\nAn abstract type (interface) used to learn QUBO matrices from constraints. Only a train method is required.\n\n\n\n\n\n","category":"type"},{"location":"#QUBOConstraints.QUBO_base","page":"Home","title":"QUBOConstraints.QUBO_base","text":"QUBO_base(n, weight = 1)\n\nA basic QUBO matrix to ensure that binarized variables keep a valid encoding.\n\n\n\n\n\n","category":"function"},{"location":"#QUBOConstraints.QUBO_linear_sum-Tuple{Any, Any}","page":"Home","title":"QUBOConstraints.QUBO_linear_sum","text":"QUBO_linear_sum(n, σ)\n\nOne valid QUBO matrix given n variables and parameter σ for the linear sum constraint.\n\n\n\n\n\n","category":"method"},{"location":"#QUBOConstraints.binarize-Union{Tuple{Vector{T}}, Tuple{T}, Tuple{Vector{T}, Any}} where T<:Number","page":"Home","title":"QUBOConstraints.binarize","text":"binarize(x[, domain]; binarization = :one_hot)\n\nBinarize x following the binarization encoding. If x is a vector (instead of a number per say), domain is optional.\n\n\n\n\n\n","category":"method"},{"location":"#QUBOConstraints.debinarize-Tuple{Any}","page":"Home","title":"QUBOConstraints.debinarize","text":"debinarize(x[, domain]; binarization = :one_hot)\n\nTransform a binary vector into a number or a set of number. If domain is not given, it will compute a default value based on binarization and x.\n\n\n\n\n\n","category":"method"},{"location":"#QUBOConstraints.is_valid","page":"Home","title":"QUBOConstraints.is_valid","text":"is_valid(x, encoding::Symbol = :none)\n\nCheck if x has a valid format for encoding.\n\nFor instance, if encoding == :one_hot, at most one bit of x can be set to 1.\n\n\n\n\n\n","category":"function"},{"location":"#QUBOConstraints.train-Tuple","page":"Home","title":"QUBOConstraints.train","text":"train(args...)\n\nDefault train method for any AbstractOptimizer.\n\n\n\n\n\n","category":"method"}]
}
